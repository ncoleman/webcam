#!/bin/ksh

# NJC 04/30/11 
# Script to retrieve webcam images, according to parameters associated in the file of the list of URLs.

# ***** Global variables ***********

# file containing list of webcam urls, their descriptions and other info
URLLISTFILE="/home/nick/feh/newformat-webcam-urls"
IMAGEDIR=/home/nick/feh/images_webcam
# set up current hour 
HOUR=$(date "+%H")
# Force retrieval flag
FORCE=0

# wget error code messages from the man page.
set -A WGETERRCODE   "No problems occurred." \
    "Generic error code."  \
    "Parse error, e.g. command-line option" \
    "File I/O error." \
    "Network failure." \
    "SSL verification failure." \
    "Username/password authentication failure." \
    "Protocol errors." \
    "Server issued an error response."

# List of URLs not retrieved because they are outside the retrieve time
URLOUTTIME=""

# ************************* Functions ****************

# Function to generate date-aware URLs.
# URLs are specific and the fix needs to be hard-coded.
function makedate {
# rothera 
# awk 'BEGIN {FS="\""} ; /<img src=.*webcams/ { print $2 }' index.php | head -1
    DATE=$(date) 
    case ${IMAGE[0]} in 
	*instacam*)
	    ;;
	*)
	    return
	    ;;	
    esac
}

# Function to check whether update is ok for this run.
# updatetime is null or a string in format "0-24".
# If current hour is within the updatetime, do the update
# Returns 1 to indicate ok, 0 for not (intentionally the opposite of true false
# so that an empty value doesn't succeed.
function checkupdate {
    typeset start end

    # always retreive if the user used the -f flag
    if [ $FORCE -ne 0 ] ; then
	return 1
    fi
    start=${UPDATETIME%%-*}
    end=${UPDATETIME##*-}
    # Handle case where start -> end crosses midnight
    # e.g. 22 -> 5: with hour at 23 or 3 = success, hour at 20 or 6 = fail
    if [ $start -ge $end ] ; then
	if [ $start -le $HOUR -o $HOUR -le $end ] ; then
	    return 1
	else
	    URLOUTTIME=$URLOUTTIME"\n$URL not retrieved: start $start, hour $HOUR, end $end"
	    return 0
	fi
    else
	if [ $start -le $HOUR -a $HOUR -le $end ] ; then
	    return 1
	else
	    URLOUTTIME=$URLOUTTIME"\n$URL not retrieved: start $start, hour $HOUR, end $end"
	    return 0
	fi
    fi
}
    
function print_help {
cat << EOFHELP
Usage:  wget-images [ -f | -h ]
Retrieve webcam images from a file containing a list of URLs and various parameters.
Options:		 -f	    force retrieval irrespective of time constraints
			 -h	    help (this message)

EOFHELP
exit 1
}

# ************** end of functions **********************

# ************** Process command line options ********
args=$(getopt fh $*) 
if [ $? -ne 0 ] ; then
    print_help
fi
set -- $args
until [ $# -eq 0 ] ; do
    case "$1"  in
	-f)
	    FORCE=1
	    WGETERRORS=$WGETERRORS"\nForcing retrieval of all images."
	    ;;
	-h)
	    print_help
	    ;;
    esac
    shift
done

# ************ Main processing starts here ************
cd $IMAGEDIR || { echo "Image directory not found" ; exit 1 ; }
rm -f *


# URL file format:
# URL,comment,date in URL (to be calculated) [1,0],time (hour)  to retrieve,output image name,
# If date in URL, hand off to function that has awareness of specific URLs
# simple URL: http://www.djfeathers.com/feathercam/feathercam.jpg|# Feather cam|0|17-09|feathercam.jpg
# date-neededd URL: http://www.antarctica.ac.uk/webcams/rothera/rothera_20110425_100033_rp.jpg| # Rothera Research station  (URL DATE specific)|1|0-24|rothera.jpg

WGETERRORS=""
TICK=$(date "+%s")
# 'while' syntax below from: http://www.cyberciti.biz/faq/ksh-read-file/
while IFS=\| read URL COMMENT DATE UPDATETIME NAME
    do
	# ignore comment lines (indicated by leading '# ' after stripping off rest of string)
	if [ ${URL%% *} != '#' ] ; then
	    # and don't bother if this is outside the update time.
	    checkupdate
	    if [ $? -eq 1  ] ; then
		#echo url "$URL", updatetime "$UPDATETIME", name "$NAME",
		wget --tries=3 --inet4-only "$URL" -O "$NAME"
		returncode=$?
		if [ $returncode -ne 0 ] ; then
		    WGETERRORS=$WGETERRORS"\nWget failed with $URL, error code is $returncode ${WGETERRCODE[$returncode]}"
		fi
		# create caption file for feh
		echo "$COMMENT" > "$NAME".txt
	    fi
	fi  
    done  < "$URLLISTFILE"
TOCK=$(date "+%s")

# create a list of images, without the accompanying caption files
/bin/ls -1 !(*.txt) > images

echo "Completed webcam image fetch in $(($TOCK - $TICK)) seconds."
echo "\nThese URLs were not retrieved as the retrieve time is outside their parameters: $URLOUTTIME"
echo "\nErrors were: $WGETERRORS"

#feh -Z -F -f images --caption-path . -D 30

# vim: set filetype=sh
