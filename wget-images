#!/bin/ksh

# NJC 04/30/11 
# Script to retrieve webcam images, according to parameters associated in the file of the list of URLs.

# TODO keywords to retrieve only those images;  URLs with dates.
# in linux, but not in OpenBSD: TZ="America/New_York"  date --date='TZ="Europe/Paris" 2004-10-31 06:30'

# ************ Global variables ***********

# save repeated sub-shell calls for later tests of true or false
`false` ; FALSE=$?
`true` ; TRUE=$?
# file containing list of URLs
URLLISTFILE="/home/nick/feh/webcam-urls"
# directory to save images
IMAGEDIR=/home/nick/feh/images_webcam
# set up current hour 
HOUR=$(date "+%H")
# Forced retrieval flag
FORCE=$FALSE
# list of keywords to search for
KEYWORDS=""
# wget error code messages (from the man page).  The array is set up so that the index is the error code returned by wget.
set -A WGETERRCODE   "No problems occurred." \
    "Generic error code."  \
    "Parse error, e.g. command-line option" \
    "File I/O error." \
    "Network failure." \
    "SSL verification failure." \
    "Username/password authentication failure." \
    "Protocol errors." \
    "Server issued an error response."
# List of URLs not retrieved because they are outside the retrieve time
URLOUTTIME=""

# ************************* Functions ****************

# Function to generate date-aware URLs.
# URLs are specific and the fix needs to be hard-coded.
function makedateurl {
    case $NAME in
	rothera*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' rothera.src)
	    NAME=rothera.jpg
	    ;;
	halley*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' halley.src)
	    NAME=halley.jpg
	    ;;
	birdisland*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' birdisland.src)
	    NAME=birdisland.jpg
	    ;;
	rssshackleton*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' rssshackleton.src)
	    NAME=rssshackleton.jpg
	    ;;
	lasvegas1*)
	    URL=$(awk 'BEGIN { FS="\"" } /img name="anim/ {  print $4;  } ' lasvegas1.src)
	    NAME=lasvegas1.jpg
	    ;;
    esac
    
    getimage
}

# Function to check whether update is ok for this run.
# updatetime is a string in format "0-24" representing a band of hours.
# If current hour is within the updatetime, do the update.
function checkupdate {
    typeset start end				# locals

    # always retreive if the user used the -f flag
    if [ $FORCE -eq $TRUE ] ; then
	return $TRUE
    fi
    start=${UPDATETIME%%-*}
    end=${UPDATETIME##*-}
    # Handle case where start -> end crosses midnight
    # e.g. 22 -> 5: with hour at 23 or 3 = success, hour at 20 or 6 = fail
    if [ $start -ge $end ] ; then
	if [ $start -le $HOUR -o $HOUR -le $end ] ; then
	    return $TRUE
	else
	    URLOUTTIME=$URLOUTTIME"\n$URL not retrieved: start $start, hour $HOUR, end $end"
	    return $FALSE
	fi
    else
	if [ $start -le $HOUR -a $HOUR -le $end ] ; then
	    return $TRUE
	else
	    URLOUTTIME=$URLOUTTIME"\n$URL not retrieved: start $start, hour $HOUR, end $end"
	    return $FALSE
	fi
    fi
}
    
function getimage {
    wget --tries=3 --prefer-family=IPv4 --user-agent="Mozilla/4.0" "$URL" -O "$NAME"
    returncode=$?
    if [ $returncode -ne 0 ] ; then
	WGETERRORS=$WGETERRORS"\nWget failed with $URL, error code is $returncode ${WGETERRCODE[$returncode]}"
    fi
}


function print_help {
cat << EOFHELP
Usage:  wget-images [-f] [-k keyword1[,keyword2,keyword3,...]] | [-h]
Retrieve webcam images from the URLs contained in a file of lists of URLs and various constraints.
Options:		 -f	    force retrieval irrespective of any constraints
			 -k words   retrieve only URLs whose keyword matchs one of the comma-separated list of the words supplied (not implemented)
			 -h	    help (this message)

EOFHELP
exit 1
}

# ************** Process command line options ********

args=$(getopt fk:h $*) 
if [ $? -ne 0 ] ; then
    print_help
fi
set -- $args
until [ $# -eq 0 ] ; do
    case "$1"  in
	-f)
	    FORCE=$TRUE
	    WGETERRORS=$WGETERRORS"\nForcing retrieval of all images."
	    ;;
	-k)
	    KEYWORDS="$2"
	    shift
	    ;;
	-h)
	    print_help
	    ;;
    esac
    shift
done

# ************ Main processing starts here ************

# Save feh running state
pkill feh
fehrunning=$?

cd $IMAGEDIR || { echo "Image directory not found" ; exit 1 ; }

# URL file format:
# URL,comment,date in URL (to be calculated) [1,0],time (hour)  to retrieve,output image name,
# If date in URL, hand off to function that has awareness of specific URLs
# simple URL: http://www.djfeathers.com/feathercam/feathercam.jpg|# Feather cam|0|17-09|feathercam.jpg
# date-neededd URL: http://www.antarctica.ac.uk/webcams/rothera/rothera_20110425_100033_rp.jpg| # Rothera Research station  (URL DATE specific)|1|0-24|rothera.jpg

WGETERRORS=""
TICK=$(date "+%s")
# 'while' syntax below from: http://www.cyberciti.biz/faq/ksh-read-file/
while IFS=\| read URL COMMENT DATE UPDATETIME NAME
    do
	# ignore comment lines (indicated by leading '# ' after stripping off rest of string)
	if [ ${URL%% *} != '#' ] ; then
	    # and only bother if this is inside the update time.
	    checkupdate
	    if [ $? -eq $TRUE  ] ; then
		rm -f $NAME $NAME.txt
		getimage
		# if this url needs to be adjusted for inbuilt date or time, do that.
		if [ DATE -eq 1 ] ; then
		    makedateurl
		fi
		# create caption file for feh
		echo "$COMMENT --  $(/bin/date +%R)" > "$NAME".txt
	    fi
	fi  
    done  < "$URLLISTFILE"
TOCK=$(date "+%s")

# create a list of images, without the accompanying caption files
/bin/ls -1 !(*.txt) > images

echo "Completed webcam image fetch in $(($TOCK - $TICK)) seconds."
echo "\nThese URLs were not retrieved as the retrieve time is outside their parameters: $URLOUTTIME"
echo "\nErrors were: $WGETERRORS"

# Restore feh running state
if [ $fehrunning -eq 0 ] ; then
    DISPLAY=:0.0 /usr/local/bin/feh -Z -F -f images --caption-path . -D 30 &
fi

# vim: set filetype=sh
