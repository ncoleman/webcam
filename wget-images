#!/bin/ksh
# Use bash, not sh,  if you don't have ksh. This script needs the ability for variables to have arrays.

# NJC 04/30/11 
# Script to retrieve webcam images, according to parameters associated in the file of the list of URLs.

# TODO keywords to retrieve only those images; 

# ************ Global variables ***********

# save repeated sub-shell calls for later tests of true or false
`false` ; FALSE=$?
`true` ; TRUE=$?
# file containing list of URLs
URLLISTFILE="/home/nick/feh/webcam-urls"
# directory to save images
IMAGEDIR=/home/nick/feh/images_webcam
# set up current hour 
HOUR=$(date "+%H")
# Forced retrieval flag
FORCE=$FALSE
# list of keywords to search for
KEYWORDS=""
# wget error code messages (from the man page).  The array is set up so that the index is the error code returned by wget.
set -A WGETERRCODE   "No problems occurred." \
    "Generic error code."  \
    "Parse error, e.g. command-line option" \
    "File I/O error." \
    "Network failure." \
    "SSL verification failure." \
    "Username/password authentication failure." \
    "Protocol errors." \
    "Server issued an error response."
# List of URLs not retrieved because they are outside the retrieve time
URLOUTTIME=""

# ************************* Functions ****************

# Function to generate date-aware URLs or to handle cases where the URL is embedded in the source html.
# URLs are specific to their own situation and the fix needs to be hard-coded.
function make_date_url {
    # fetch indicates whether this image needs to be fetched from the internet.
    # Used when the image needs manipulating rather than a new image fetched;
    # the default is to fetch a new image.
    typeset fetch=1
    case $NAME in
	lasvegas1*)
	    URL=$(awk 'BEGIN { FS="\"" } /img name="anim/ {  print $4;  } ' lasvegas1.src)
	    NAME=lasvegas1.jpg
	    rm -f lasvegas1.src
	    ;;
	# UK Antarctic Bases
	rothera*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' rothera.src)
	    NAME=rothera.jpg
	    rm -f rothera.src
	    ;;
	halley*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' halley.src)
	    NAME=halley.jpg
	    rm -f halley.src
	    ;;
	birdisland*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' birdisland.src)
	    NAME=birdisland.jpg
	    rm -f birdisland.src
	    ;;
	rssshackleton*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main/ {  getline ;print $2;  } ' rssshackleton.src)
	    NAME=rssshackleton.jpg
	    rm -f rssshackleton.src
	    ;;
	# Australian Antarctic Bases
	davis*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main-image/ {  print $4;  } ' davis.src)
	    NAME=davis.jpg
	    rm -f davis.src
	    ;;
	casey*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main-image/ {  print $4;  } ' casey.src)
	    NAME=casey.jpg
	    rm -f casey.src
	    ;;
	mawson*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main-image/ {  print $4;  } ' mawson.src)
	    NAME=mawson.jpg
	    rm -f mawson.src
	    ;;
	macquarie*)
	    URL=$(awk 'BEGIN { FS="\"" } /div class="main-image/ {  print $4;  } ' macquarie.src)
	    NAME=macquarie.jpg
	    rm -f macquarie.src
	    ;;
	auroraship*)
	    URL=$(awk 'BEGIN { FS="\"" } /<img src="http/ {  print $2; exit } ' auroraship.src)
	    NAME=auroraship.jpg
	    rm -f auroraship.src
	    ;;
	portdouglas*)
	    echo "Retrieving port douglas"
	    HEADER=--header='ETag: "7ca8f8-a74f-e1ef2a00"'
	    HEADER=--header="referer: 'http://www.downunder.com'"
	    ;;
	london_orig*)
	    # the london skyline has a large black area to the right added.  Remove it.
	    convert london_orig.jpg -crop 640x376 london.jpg
	    /bin/rm london_orig.jpg
	    NAME=london.jpg
	    fetch=0
	    ;;
    esac
   
    if [ $fetch -ne 0 ] ; then 
	get_image $HEADER
    fi
}

# Function to check whether update is ok for this run.
#
# updatetime is a string in format "0-24[,0-24]" representing a band of hours.
# Two (TODO allow unlimited) bands can be checked, to allow for such use cases as one retrieval
# at dawn and one retrieval at dusk and no other retrievals.  
#
# If current hour is within the updatetime, do the update.
function checkupdate {
    typeset time start end band1 band2		# locals

    # always retrieve if the user used the -f flag
    if [ $FORCE -eq $TRUE ] ; then
	return $TRUE
    fi

    band1=$(echo $UPDATETIME | cut -d , -f 1)
    band2=$(echo $UPDATETIME | cut -d , -f 2)
    # band3, band4, etc
    #band3=$(echo $UPDATETIME | cut -d , -f 3)
    # 'cut' doesn't give an empty field if the field is not found, it gives the previous field, so force it empty.
    if [ $band1 == $band2 ] ; then
	band2=""
    fi
    for time in $band1 $band2 ; do
	# reached an empty time without finding a TRUE, so exit;
	if [ -z $time ] ; then
	    break;
	fi
	start=${time%%-*}
	end=${time##*-}
	# To avoid complicated if...then, if a true is found, return immediately, otherwise keep processing
	# Handle case where start -> end crosses midnight
	# e.g. 22 -> 5: with hour at 23 or 3 = success, hour at 20 or 6 = fail
	if [ $start -ge $end ] ; then
	    if [ $start -le $HOUR -o $HOUR -le $end ] ; then
		return $TRUE
	    fi
	else
	    if [ $start -le $HOUR -a $HOUR -le $end ] ; then
		return $TRUE
	    fi
	fi
    done
    URLOUTTIME=$URLOUTTIME"\n$URL not retrieved: hour $HOUR, updatetimes $UPDATETIME."
    return $FALSE
}
    
# Function to retrieve the current image.  Assumes the relevant variables are already set.
# TODO An extra flag can be passed in on the function call (e.g. --header=xxx)
function get_image {
    wget  --quiet --tries=3 --timeout=600 --prefer-family=IPv4 --user-agent="Mozilla/4.0" $1 -O "$NAME" "$URL" 
    returncode=$?
    if [ $returncode -ne 0 ] ; then
	WGETERRORS=$WGETERRORS"\nWget failed with $URL, error code is $returncode ${WGETERRCODE[$returncode]}"
    fi
}

# Function to print a help message and exit.
function print_help {
cat << EOFHELP
Usage:  wget-images [-z][-f][-k keyword1[,keyword2,keyword3,...]] | [-h]
Retrieve webcam images from the URLs contained in a file of lists of URLs and various constraints.
Options:		 -f	    force retrieval irrespective of any constraints
			 -k words   retrieve only URLs whose keyword matchs one of the comma-separated list of the words supplied (not implemented)
			 -z	    don't restart feh
			 -h	    help (this message)

EOFHELP
exit 1
}

# ************** Process command line options ********

# Save feh running state
pkill feh
fehrunning=$?

args=$(getopt fk:h $*) 
if [ $? -ne 0 ] ; then
    print_help
fi
set -- $args
until [ $# -eq 0 ] ; do
    case "$1"  in
	-f)
	    FORCE=$TRUE
	    WGETERRORS=$WGETERRORS"\nForcing retrieval of all images."
	    ;;
	-k)
	    KEYWORDS="$2"
	    shift
	    ;;
	-z)
	    # dont start feh 
	    fehrunning=1
	    ;;
	-h)
	    print_help
	    exit
	    ;;
    esac
    shift
done

# ************ Main processing starts here ************

cd $IMAGEDIR || { echo "Image directory not found" ; exit 1 ; }
find $IMAGEDIR -mtime +7 -exec /bin/rm {} {}.txt \;				# get rid of old images
echo "Wget images run started at $(/bin/date +%R)"

# URL file format:
# URL,comment,date in URL (to be calculated) [1,0],time (hour)  to retrieve,output image name,
# If date in URL, hand off to function that has awareness of specific URLs
# simple URL: http://www.djfeathers.com/feathercam/feathercam.jpg|# Feather cam|0|17-09|feathercam.jpg
# date-neededd URL: http://www.antarctica.ac.uk/webcams/rothera/rothera_20110425_100033_rp.jpg| # Rothera Research station  (URL DATE specific)|1|0-24|rothera.jpg

WGETERRORS=""
TICK=$(date "+%s")
# 'while' syntax below from: http://www.cyberciti.biz/faq/ksh-read-file/
while IFS=\| read URL COMMENT DATEADJ UPDATETIME NAME
    do
	# ignore comment lines (indicated by leading '# ' after stripping off rest of string)
	if [ ${URL%% *} != '#' ] ; then
	    # and only bother if this is inside the update time.
	    checkupdate
	    if [ $? -eq $TRUE  ] ; then
		rm -f $NAME $NAME.txt
		get_image
		# if this url needs to be adjusted for inbuilt date or time, do that.
		if [ $DATEADJ -eq 1 ] ; then
		    make_date_url
		fi
		# create caption file for feh
		echo "$COMMENT --  $(/bin/date +%R)" > "$NAME".txt
	    fi
	fi  
    done  < "$URLLISTFILE"
TOCK=$(date "+%s")

# create a list of images, without the accompanying caption files
/bin/ls -1 !(*.txt) > images

echo "Wget images run finished at $(/bin/date +%R)"
echo "Completed webcam image fetch in $(($TOCK - $TICK)) seconds."
echo "\nThese URLs were not retrieved as the retrieve time is outside their parameters: $URLOUTTIME"
echo "\nErrors were: $WGETERRORS"

# Restore feh running state
if [ $fehrunning -eq 0 ] ; then
    (DISPLAY=:0.0 /usr/local/bin/feh --randomize --auto-zoom --fullscreen --filelist $IMAGEDIR/images --caption-path . --slideshow-delay 30 >/dev/null) &
fi

# vim: set filetype=sh
